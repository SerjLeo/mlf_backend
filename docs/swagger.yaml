basePath: /api
definitions:
  http_1_1.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  http_1_1.SignUpInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  http_1_1.dataResponse:
    properties:
      data: {}
    type: object
  http_1_1.dataWithPaginationResponse:
    properties:
      data: {}
      meta:
        $ref: '#/definitions/http_1_1.metaParams'
    type: object
  http_1_1.errorResponse:
    properties:
      error:
        type: string
    type: object
  http_1_1.metaParams:
    properties:
      page:
        type: integer
      perPage:
        type: integer
      total:
        type: integer
    type: object
  http_1_1.signUpWithEmailInput:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.Category:
    properties:
      color:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        maxLength: 255
        type: string
      updated_at:
        type: string
    type: object
  models.CreateCategoryInput:
    properties:
      color:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.CreateTransactionInput:
    properties:
      amount:
        type: number
      categories:
        items:
          type: integer
        type: array
      currency_id:
        type: integer
      description:
        maxLength: 255
        type: string
      type:
        type: boolean
    required:
    - amount
    type: object
host: localhost:9001
info:
  contact: {}
  description: API for MLF application
  license:
    name: MIT
  title: My Local Financier API
  version: "1.0"
paths:
  /auth/check:
    get:
      consumes:
      - application/json
      description: check token and return info if correct
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      summary: Check user token and return user info
      tags:
      - auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: returns auth JWT
      parameters:
      - description: info for user's login
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http_1_1.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      summary: User sign-in with email and password
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: creates user and returns auth JWT
      parameters:
      - description: data for user creation
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http_1_1.SignUpInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      summary: User sign-up with name, email and password
      tags:
      - auth
  /auth/sign-up-with-email:
    post:
      consumes:
      - application/json
      description: creates user with email, password generates automatically and returns
        auth JWT
      parameters:
      - description: email for user creation
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http_1_1.signUpWithEmailInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      summary: User sign-up with email only
      tags:
      - auth
  /category:
    get:
      consumes:
      - application/json
      description: returns user categories list with pagination
      parameters:
      - description: pagination params and filters
        in: body
        name: input
        schema:
          $ref: '#/definitions/http_1_1.metaParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataWithPaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get categories list
      tags:
      - category
    post:
      consumes:
      - application/json
      description: creates new category and returns it
      parameters:
      - description: created category fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new category
      tags:
      - category
  /category/{categoryId}:
    delete:
      consumes:
      - application/json
      description: delete existing category and returns id of deleted category
      parameters:
      - description: target category id
        in: path
        name: categoryId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete existing category
      tags:
      - category
    get:
      consumes:
      - application/json
      description: returns user's category object by id
      parameters:
      - description: target category id
        in: path
        name: categoryId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get category by id
      tags:
      - category
    put:
      consumes:
      - application/json
      description: updates existing category and returns updated instance
      parameters:
      - description: updated category fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      - description: target category id
        in: path
        name: categoryId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update existing category
      tags:
      - category
  /profile:
    get:
      consumes:
      - application/json
      description: get existing user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user's profile
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: update profile fields
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      summary: Update user's profile
      tags:
      - profile
  /transactions:
    get:
      consumes:
      - application/json
      description: returns transactions list with pagination
      parameters:
      - description: pagination params and filters
        in: body
        name: input
        schema:
          $ref: '#/definitions/http_1_1.metaParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataWithPaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get transactions list
      tags:
      - transaction
    post:
      consumes:
      - application/json
      description: creates new transaction and returns it
      parameters:
      - description: created transaction fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateTransactionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new transaction
      tags:
      - transaction
  /transactions/{transactionId}:
    get:
      consumes:
      - application/json
      description: returns user's transaction object by id
      parameters:
      - description: target transaction id
        in: path
        name: categoryId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http_1_1.dataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http_1_1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get transaction by id
      tags:
      - transaction
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
