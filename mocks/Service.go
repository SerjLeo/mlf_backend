// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "github.com/SerjLeo/mlf_backend/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AttachCategory provides a mock function with given fields: userId, transactionId, categoryId
func (_m *Service) AttachCategory(userId int, transactionId int, categoryId int) error {
	ret := _m.Called(userId, transactionId, categoryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(userId, transactionId, categoryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUserToken provides a mock function with given fields: token
func (_m *Service) CheckUserToken(token string) (int, error) {
	ret := _m.Called(token)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: user
func (_m *Service) Create(user *models.CreateUserInput) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.CreateUserInput) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.CreateUserInput) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: input, userId
func (_m *Service) CreateAccount(input *models.CreateAccountInput, userId int) (*models.AccountWithBalances, error) {
	ret := _m.Called(input, userId)

	var r0 *models.AccountWithBalances
	if rf, ok := ret.Get(0).(func(*models.CreateAccountInput, int) *models.AccountWithBalances); ok {
		r0 = rf(input, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountWithBalances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.CreateAccountInput, int) error); ok {
		r1 = rf(input, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCategory provides a mock function with given fields: userId, input
func (_m *Service) CreateCategory(userId int, input models.CreateCategoryInput) (models.Category, error) {
	ret := _m.Called(userId, input)

	var r0 models.Category
	if rf, ok := ret.Get(0).(func(int, models.CreateCategoryInput) models.Category); ok {
		r0 = rf(userId, input)
	} else {
		r0 = ret.Get(0).(models.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, models.CreateCategoryInput) error); ok {
		r1 = rf(userId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: userId, input
func (_m *Service) CreateTransaction(userId int, input *models.CreateTransactionInput) (*models.Transaction, error) {
	ret := _m.Called(userId, input)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(int, *models.CreateTransactionInput) *models.Transaction); ok {
		r0 = rf(userId, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *models.CreateTransactionInput) error); ok {
		r1 = rf(userId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserByEmail provides a mock function with given fields: email
func (_m *Service) CreateUserByEmail(email string) (string, error) {
	ret := _m.Called(email)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: userId, categoryId
func (_m *Service) DeleteCategory(userId int, categoryId int) error {
	ret := _m.Called(userId, categoryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, categoryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransaction provides a mock function with given fields: userId, transactionId
func (_m *Service) DeleteTransaction(userId int, transactionId int) error {
	ret := _m.Called(userId, transactionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, transactionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachCategory provides a mock function with given fields: userId, transactionId, categoryId
func (_m *Service) DetachCategory(userId int, transactionId int, categoryId int) error {
	ret := _m.Called(userId, transactionId, categoryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(userId, transactionId, categoryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountById provides a mock function with given fields: accountId, userId
func (_m *Service) GetAccountById(accountId int, userId int) (*models.AccountWithBalances, error) {
	ret := _m.Called(accountId, userId)

	var r0 *models.AccountWithBalances
	if rf, ok := ret.Get(0).(func(int, int) *models.AccountWithBalances); ok {
		r0 = rf(accountId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountWithBalances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(accountId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields: pagination, userId
func (_m *Service) GetAccounts(pagination models.PaginationParams, userId int) ([]models.AccountWithBalances, error) {
	ret := _m.Called(pagination, userId)

	var r0 []models.AccountWithBalances
	if rf, ok := ret.Get(0).(func(models.PaginationParams, int) []models.AccountWithBalances); ok {
		r0 = rf(pagination, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AccountWithBalances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.PaginationParams, int) error); ok {
		r1 = rf(pagination, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionById provides a mock function with given fields: userId, transactionId
func (_m *Service) GetTransactionById(userId int, transactionId int) (models.Transaction, error) {
	ret := _m.Called(userId, transactionId)

	var r0 models.Transaction
	if rf, ok := ret.Get(0).(func(int, int) models.Transaction); ok {
		r0 = rf(userId, transactionId)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: userId
func (_m *Service) GetTransactions(userId int) ([]models.Transaction, error) {
	ret := _m.Called(userId)

	var r0 []models.Transaction
	if rf, ok := ret.Get(0).(func(int) []models.Transaction); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCategories provides a mock function with given fields: userId, pagination
func (_m *Service) GetUserCategories(userId int, pagination models.PaginationParams) ([]models.Category, error) {
	ret := _m.Called(userId, pagination)

	var r0 []models.Category
	if rf, ok := ret.Get(0).(func(int, models.PaginationParams) []models.Category); ok {
		r0 = rf(userId, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, models.PaginationParams) error); ok {
		r1 = rf(userId, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCategoryById provides a mock function with given fields: userId, categoryId
func (_m *Service) GetUserCategoryById(userId int, categoryId int) (models.Category, error) {
	ret := _m.Called(userId, categoryId)

	var r0 models.Category
	if rf, ok := ret.Get(0).(func(int, int) models.Category); ok {
		r0 = rf(userId, categoryId)
	} else {
		r0 = ret.Get(0).(models.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: userId
func (_m *Service) GetUserProfile(userId int) (*models.FullProfile, error) {
	ret := _m.Called(userId)

	var r0 *models.FullProfile
	if rf, ok := ret.Get(0).(func(int) *models.FullProfile); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FullProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTestEmail provides a mock function with given fields:
func (_m *Service) SendTestEmail() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignIn provides a mock function with given fields: email, password
func (_m *Service) SignIn(email string, password string) (string, error) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteAccount provides a mock function with given fields: accountId, userId
func (_m *Service) SoftDeleteAccount(accountId int, userId int) error {
	ret := _m.Called(accountId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(accountId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccount provides a mock function with given fields: accountId, userId, input
func (_m *Service) UpdateAccount(accountId int, userId int, input *models.UpdateAccountInput) (*models.AccountWithBalances, error) {
	ret := _m.Called(accountId, userId, input)

	var r0 *models.AccountWithBalances
	if rf, ok := ret.Get(0).(func(int, int, *models.UpdateAccountInput) *models.AccountWithBalances); ok {
		r0 = rf(accountId, userId, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountWithBalances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, *models.UpdateAccountInput) error); ok {
		r1 = rf(accountId, userId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: userId, categoryId, input
func (_m *Service) UpdateCategory(userId int, categoryId int, input models.Category) (models.Category, error) {
	ret := _m.Called(userId, categoryId, input)

	var r0 models.Category
	if rf, ok := ret.Get(0).(func(int, int, models.Category) models.Category); ok {
		r0 = rf(userId, categoryId, input)
	} else {
		r0 = ret.Get(0).(models.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, models.Category) error); ok {
		r1 = rf(userId, categoryId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: input, userId
func (_m *Service) UpdateProfile(input *models.UpdateProfileInput, userId int) (*models.FullProfile, error) {
	ret := _m.Called(input, userId)

	var r0 *models.FullProfile
	if rf, ok := ret.Get(0).(func(*models.UpdateProfileInput, int) *models.FullProfile); ok {
		r0 = rf(input, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FullProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UpdateProfileInput, int) error); ok {
		r1 = rf(input, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields: userId, transactionId, input
func (_m *Service) UpdateTransaction(userId int, transactionId int, input *models.Transaction) (models.Transaction, error) {
	ret := _m.Called(userId, transactionId, input)

	var r0 models.Transaction
	if rf, ok := ret.Get(0).(func(int, int, *models.Transaction) models.Transaction); ok {
		r0 = rf(userId, transactionId, input)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, *models.Transaction) error); ok {
		r1 = rf(userId, transactionId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
